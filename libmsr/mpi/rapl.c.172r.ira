
;; Function MPI_Init (MPI_Init)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 39 count 29 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r103: preferred GENERAL_REGS, alternative NO_REGS
    a2 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred DIREG, alternative GENERAL_REGS
    a4 (r102,l0) best DIREG, cover GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS
    a5 (r101,l0) best DIREG, cover GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS
    a10 (r100,l0) best AREG, cover GENERAL_REGS
    r99: preferred DREG, alternative GENERAL_REGS
    a9 (r99,l0) best DREG, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS
    a14 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS
    a15 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS
    a18 (r96,l0) best DIREG, cover GENERAL_REGS
    r95: preferred SIREG, alternative GENERAL_REGS
    a19 (r95,l0) best SIREG, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS
    a23 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS
    a24 (r93,l0) best DIREG, cover GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS
    a25 (r92,l0) best DIREG, cover GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS
    a26 (r91,l0) best DIREG, cover GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS
    a27 (r90,l0) best DIREG, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS
    a32 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS
    a34 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS
    a33 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS
    a36 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS
    a35 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS
    a38 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS
    a37 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS
    a40 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS
    a39 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred DIREG, alternative GENERAL_REGS
    a43 (r80,l0) best DIREG, cover GENERAL_REGS
    r79: preferred SIREG, alternative GENERAL_REGS
    a44 (r79,l0) best SIREG, cover GENERAL_REGS
    r78: preferred AREG, alternative GENERAL_REGS
    a0 (r78,l0) best AREG, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS
    a45 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred AREG, alternative GENERAL_REGS
    a42 (r75,l0) best AREG, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS
    a41 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS
    a31 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred CREG, alternative GENERAL_REGS
    a30 (r72,l0) best CREG, cover GENERAL_REGS
    r71: preferred DIREG, alternative GENERAL_REGS
    a29 (r71,l0) best DIREG, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS
    a28 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS
    a22 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred CREG, alternative GENERAL_REGS
    a21 (r68,l0) best CREG, cover GENERAL_REGS
    r67: preferred DIREG, alternative GENERAL_REGS
    a20 (r67,l0) best DIREG, cover GENERAL_REGS
    r66: preferred AREG, alternative GENERAL_REGS
    a17 (r66,l0) best AREG, cover GENERAL_REGS
    r65: preferred AREG, alternative GENERAL_REGS
    a16 (r65,l0) best AREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS
    a13 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred DREG, alternative GENERAL_REGS
    a12 (r63,l0) best DREG, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS
    a11 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS
    a8 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred CREG, alternative GENERAL_REGS
    a7 (r60,l0) best CREG, cover GENERAL_REGS
    r59: preferred SIREG, alternative GENERAL_REGS
    a6 (r59,l0) best SIREG, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS
    a3 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r78,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a2(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a4(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r99,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r100,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 MEM:4
  a11(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r63,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a13(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a14(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a15(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a16(r65,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a17(r66,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a18(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a20(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a22(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a23(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a24(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a25(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a26(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a28(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 MEM:19
  a29(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a30(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a31(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a32(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a33(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a34(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a35(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a36(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a37(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a38(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a39(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a40(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a41(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a42(r75,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a43(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a44(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a45(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 197(l0): point = 0
   Insn 191(l0): point = 2
   Insn 187(l0): point = 4
   Insn 184(l0): point = 7
   Insn 183(l0): point = 9
   Insn 180(l0): point = 12
   Insn 179(l0): point = 14
   Insn 178(l0): point = 16
   Insn 177(l0): point = 18
   Insn 176(l0): point = 20
   Insn 175(l0): point = 22
   Insn 174(l0): point = 24
   Insn 173(l0): point = 26
   Insn 172(l0): point = 28
   Insn 171(l0): point = 30
   Insn 170(l0): point = 32
   Insn 169(l0): point = 34
   Insn 168(l0): point = 36
   Insn 167(l0): point = 38
   Insn 166(l0): point = 40
   Insn 165(l0): point = 42
   Insn 164(l0): point = 44
   Insn 163(l0): point = 46
   Insn 162(l0): point = 48
   Insn 161(l0): point = 50
   Insn 159(l0): point = 53
   Insn 158(l0): point = 55
   Insn 157(l0): point = 57
   Insn 156(l0): point = 59
   Insn 155(l0): point = 65
   Insn 154(l0): point = 67
   Insn 150(l0): point = 70
   Insn 149(l0): point = 72
   Insn 148(l0): point = 74
   Insn 147(l0): point = 76
   Insn 145(l0): point = 79
   Insn 144(l0): point = 81
   Insn 143(l0): point = 83
   Insn 142(l0): point = 85
   Insn 141(l0): point = 87
   Insn 140(l0): point = 89
   Insn 139(l0): point = 91
   Insn 138(l0): point = 93
   Insn 137(l0): point = 95
   Insn 136(l0): point = 97
   Insn 135(l0): point = 99
   Insn 134(l0): point = 101
   Insn 133(l0): point = 103
   Insn 132(l0): point = 105
   Insn 129(l0): point = 108
   Insn 128(l0): point = 110
   Insn 127(l0): point = 112
   Insn 126(l0): point = 114
   Insn 125(l0): point = 116
   Insn 124(l0): point = 118
   Insn 123(l0): point = 120
   Insn 224(l0): point = 123
   Insn 116(l0): point = 125
   Insn 115(l0): point = 127
   Insn 114(l0): point = 129
   Insn 113(l0): point = 131
   Insn 112(l0): point = 133
   Insn 111(l0): point = 135
   Insn 110(l0): point = 137
   Insn 109(l0): point = 139
   Insn 108(l0): point = 141
   Insn 222(l0): point = 144
   Insn 207(l0): point = 146
   Insn 103(l0): point = 148
   Insn 102(l0): point = 150
   Insn 101(l0): point = 152
   Insn 220(l0): point = 155
   Insn 96(l0): point = 157
   Insn 95(l0): point = 159
   Insn 94(l0): point = 161
   Insn 218(l0): point = 164
   Insn 89(l0): point = 166
   Insn 88(l0): point = 168
   Insn 87(l0): point = 170
   Insn 216(l0): point = 173
   Insn 82(l0): point = 175
   Insn 81(l0): point = 177
   Insn 80(l0): point = 179
   Insn 214(l0): point = 182
   Insn 75(l0): point = 185
   Insn 74(l0): point = 187
   Insn 73(l0): point = 190
   Insn 72(l0): point = 192
   Insn 211(l0): point = 195
   Insn 68(l0): point = 198
   Insn 67(l0): point = 200
   Insn 66(l0): point = 203
   Insn 65(l0): point = 205
   Insn 64(l0): point = 208
   Insn 63(l0): point = 210
   Insn 62(l0): point = 212
   Insn 58(l0): point = 215
   Insn 57(l0): point = 217
   Insn 56(l0): point = 219
   Insn 55(l0): point = 221
   Insn 54(l0): point = 223
   Insn 53(l0): point = 225
   Insn 52(l0): point = 227
   Insn 51(l0): point = 229
   Insn 50(l0): point = 231
   Insn 49(l0): point = 233
   Insn 48(l0): point = 235
   Insn 46(l0): point = 238
   Insn 45(l0): point = 240
   Insn 44(l0): point = 242
   Insn 43(l0): point = 244
   Insn 41(l0): point = 247
   Insn 40(l0): point = 249
   Insn 39(l0): point = 251
   Insn 38(l0): point = 253
   Insn 36(l0): point = 256
   Insn 35(l0): point = 258
   Insn 34(l0): point = 260
   Insn 33(l0): point = 262
   Insn 31(l0): point = 265
   Insn 30(l0): point = 267
   Insn 29(l0): point = 269
   Insn 28(l0): point = 271
   Insn 26(l0): point = 274
   Insn 25(l0): point = 276
   Insn 24(l0): point = 278
   Insn 23(l0): point = 280
   Insn 208(l0): point = 283
   Insn 18(l0): point = 285
   Insn 17(l0): point = 287
   Insn 16(l0): point = 289
   Insn 15(l0): point = 291
   Insn 14(l0): point = 293
   Insn 13(l0): point = 295
   Insn 12(l0): point = 297
   Insn 10(l0): point = 300
   Insn 9(l0): point = 302
   Insn 8(l0): point = 304
   Insn 7(l0): point = 306
   Insn 3(l0): point = 308
   Insn 2(l0): point = 310
 a0(r78): [3..4]
 a1(r76): [283..285] [5..7]
 a2(r103): [13..14]
 a3(r58): [13..16]
 a4(r102): [21..22]
 a5(r101): [33..34]
 a6(r59): [37..42]
 a7(r60): [41..44]
 a8(r61): [56..57]
 a9(r99): [63..63] [61..61] [58..59]
 a10(r100): [59..60]
 a11(r62): [60..65]
 a12(r63): [64..67] [62..62]
 a13(r64): [82..83]
 a14(r98): [84..85]
 a15(r97): [88..89]
 a16(r65): [88..91]
 a17(r66): [109..110]
 a18(r96): [115..118]
 a19(r95): [117..120]
 a20(r67): [128..135]
 a21(r68): [134..137]
 a22(r69): [138..139]
 a23(r94): [140..141]
 a24(r93): [151..152]
 a25(r92): [160..161]
 a26(r91): [169..170]
 a27(r90): [178..179]
 a28(r70): [201..212] [188..194]
 a29(r71): [222..229]
 a30(r72): [228..231]
 a31(r73): [232..233]
 a32(r89): [234..235]
 a33(r87): [241..242]
 a34(r88): [243..244]
 a35(r85): [250..251]
 a36(r86): [252..253]
 a37(r83): [259..260]
 a38(r84): [261..262]
 a39(r81): [268..269]
 a40(r82): [270..271]
 a41(r74): [277..278]
 a42(r75): [286..287]
 a43(r80): [292..295]
 a44(r79): [294..297]
 a45(r77): [303..304]
Compressing live ranges: from 313 to 95 - 30%
Ranges after the compression:
 a0(r78): [0..1]
 a1(r76): [85..86] [2..3]
 a2(r103): [4..5]
 a3(r58): [4..6]
 a4(r102): [7..8]
 a5(r101): [9..10]
 a6(r59): [11..13]
 a7(r60): [12..14]
 a8(r61): [15..16]
 a9(r99): [22..22] [20..20] [17..18]
 a10(r100): [18..19]
 a11(r62): [19..24]
 a12(r63): [23..25] [21..21]
 a13(r64): [26..27]
 a14(r98): [28..29]
 a15(r97): [30..31]
 a16(r65): [30..32]
 a17(r66): [33..34]
 a18(r96): [35..37]
 a19(r95): [36..38]
 a20(r67): [39..41]
 a21(r68): [40..42]
 a22(r69): [43..44]
 a23(r94): [45..46]
 a24(r93): [47..48]
 a25(r92): [49..50]
 a26(r91): [51..52]
 a27(r90): [53..54]
 a28(r70): [57..58] [55..56]
 a29(r71): [59..61]
 a30(r72): [60..62]
 a31(r73): [63..64]
 a32(r89): [65..66]
 a33(r87): [67..68]
 a34(r88): [69..70]
 a35(r85): [71..72]
 a36(r86): [73..74]
 a37(r83): [75..76]
 a38(r84): [77..78]
 a39(r81): [79..80]
 a40(r82): [81..82]
 a41(r74): [83..84]
 a42(r75): [87..88]
 a43(r80): [89..91]
 a44(r79): [90..92]
 a45(r77): [93..94]
  regions=1, blocks=29, points=95
    allocnos=46, copies=0, conflicts=0, ranges=51
Disposition:
    3:r58  l0     0    6:r59  l0     0    7:r60  l0     1    8:r61  l0     0
   11:r62  l0     2   12:r63  l0     0   13:r64  l0     0   16:r65  l0     0
   17:r66  l0     0   20:r67  l0     0   21:r68  l0     1   22:r69  l0     0
   28:r70  l0     0   29:r71  l0     0   30:r72  l0     1   31:r73  l0     0
   41:r74  l0     0   42:r75  l0     0    1:r76  l0     0   45:r77  l0     0
    0:r78  l0     0   44:r79  l0     1   43:r80  l0     0   39:r81  l0     0
   40:r82  l0     0   37:r83  l0     0   38:r84  l0     0   35:r85  l0     0
   36:r86  l0     0   33:r87  l0     0   34:r88  l0     0   32:r89  l0     0
   27:r90  l0     0   26:r91  l0     0   25:r92  l0     0   24:r93  l0     0
   23:r94  l0     0   19:r95  l0     1   18:r96  l0     0   15:r97  l0     1
   14:r98  l0     0    9:r99  l0     1   10:r100 l0     0    5:r101 l0     0
    4:r102 l0     0    2:r103 l0     1
+++Costs: overall -21, reg -21, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 77
insn=9, live_throughout: 7, dead_or_set: 77
insn=10, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 79
insn=13, live_throughout: 7, 79, dead_or_set: 80
insn=14, live_throughout: 7, 80, dead_or_set: 4, 79
insn=15, live_throughout: 4, 7, dead_or_set: 5, 80
insn=16, live_throughout: 7, dead_or_set: 0, 4, 5
insn=17, live_throughout: 7, dead_or_set: 0, 75
insn=18, live_throughout: 7, dead_or_set: 75, 76
insn=208, live_throughout: 7, 76, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 74
insn=25, live_throughout: 7, dead_or_set: 74
insn=26, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 82
insn=29, live_throughout: 7, dead_or_set: 81, 82
insn=30, live_throughout: 7, dead_or_set: 81
insn=31, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 84
insn=34, live_throughout: 7, dead_or_set: 83, 84
insn=35, live_throughout: 7, dead_or_set: 83
insn=36, live_throughout: 7, dead_or_set: 
insn=38, live_throughout: 7, dead_or_set: 86
insn=39, live_throughout: 7, dead_or_set: 85, 86
insn=40, live_throughout: 7, dead_or_set: 85
insn=41, live_throughout: 7, dead_or_set: 
insn=43, live_throughout: 7, dead_or_set: 88
insn=44, live_throughout: 7, dead_or_set: 87, 88
insn=45, live_throughout: 7, dead_or_set: 87
insn=46, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 89
insn=49, live_throughout: 7, dead_or_set: 73, 89
insn=50, live_throughout: 7, dead_or_set: 72, 73
insn=51, live_throughout: 7, 72, dead_or_set: 71
insn=52, live_throughout: 7, 71, dead_or_set: 2, 72
insn=53, live_throughout: 2, 7, 71, dead_or_set: 1
insn=54, live_throughout: 1, 2, 7, 71, dead_or_set: 4
insn=55, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 71
insn=56, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=57, live_throughout: 7, dead_or_set: 5
insn=58, live_throughout: 7, dead_or_set: 5
insn=60, live_throughout: 7, dead_or_set: 
insn=62, live_throughout: 7, dead_or_set: 70
insn=63, live_throughout: 7, 70, dead_or_set: 
insn=64, live_throughout: 7, 70, dead_or_set: 
insn=65, live_throughout: 7, 70, dead_or_set: 
insn=66, live_throughout: 7, 70, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 70
insn=68, live_throughout: 7, dead_or_set: 
insn=211, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, 70, dead_or_set: 
insn=72, live_throughout: 7, 70, dead_or_set: 
insn=73, live_throughout: 7, 70, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 70
insn=75, live_throughout: 7, dead_or_set: 
insn=214, live_throughout: 7, dead_or_set: 
insn=78, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 90
insn=81, live_throughout: 7, dead_or_set: 5, 90
insn=82, live_throughout: 7, dead_or_set: 5
insn=216, live_throughout: 7, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 
insn=87, live_throughout: 7, dead_or_set: 91
insn=88, live_throughout: 7, dead_or_set: 5, 91
insn=89, live_throughout: 7, dead_or_set: 5
insn=218, live_throughout: 7, dead_or_set: 
insn=92, live_throughout: 7, dead_or_set: 
insn=94, live_throughout: 7, dead_or_set: 92
insn=95, live_throughout: 7, dead_or_set: 5, 92
insn=96, live_throughout: 7, dead_or_set: 5
insn=220, live_throughout: 7, dead_or_set: 
insn=99, live_throughout: 7, dead_or_set: 
insn=101, live_throughout: 7, dead_or_set: 93
insn=102, live_throughout: 7, dead_or_set: 5, 93
insn=103, live_throughout: 7, dead_or_set: 5
insn=207, live_throughout: 7, dead_or_set: 
insn=222, live_throughout: 7, dead_or_set: 
insn=106, live_throughout: 7, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 94
insn=109, live_throughout: 7, dead_or_set: 69, 94
insn=110, live_throughout: 7, dead_or_set: 68, 69
insn=111, live_throughout: 7, 68, dead_or_set: 67
insn=112, live_throughout: 7, 67, dead_or_set: 2, 68
insn=113, live_throughout: 2, 7, 67, dead_or_set: 1
insn=114, live_throughout: 1, 2, 7, 67, dead_or_set: 4
insn=115, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 67
insn=116, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=224, live_throughout: 7, dead_or_set: 
insn=121, live_throughout: 7, dead_or_set: 
insn=123, live_throughout: 7, dead_or_set: 95
insn=124, live_throughout: 7, 95, dead_or_set: 96
insn=125, live_throughout: 7, 96, dead_or_set: 4, 95
insn=126, live_throughout: 4, 7, dead_or_set: 5, 96
insn=127, live_throughout: 7, dead_or_set: 0, 4, 5
insn=128, live_throughout: 7, dead_or_set: 0, 66
insn=129, live_throughout: 7, dead_or_set: 66
insn=130, live_throughout: 7, dead_or_set: 
insn=132, live_throughout: 7, dead_or_set: 
insn=133, live_throughout: 7, dead_or_set: 4
insn=134, live_throughout: 4, 7, dead_or_set: 5
insn=135, live_throughout: 7, dead_or_set: 0, 4, 5
insn=136, live_throughout: 7, dead_or_set: 4
insn=137, live_throughout: 4, 7, dead_or_set: 5
insn=138, live_throughout: 7, dead_or_set: 0, 4, 5
insn=139, live_throughout: 7, dead_or_set: 0, 65
insn=140, live_throughout: 7, 65, dead_or_set: 97
insn=141, live_throughout: 7, dead_or_set: 65, 97
insn=142, live_throughout: 7, dead_or_set: 98
insn=143, live_throughout: 7, dead_or_set: 64, 98
insn=144, live_throughout: 7, dead_or_set: 64
insn=145, live_throughout: 7, dead_or_set: 
insn=147, live_throughout: 7, dead_or_set: 5
insn=148, live_throughout: 7, dead_or_set: 0, 5
insn=149, live_throughout: 7, dead_or_set: 5
insn=150, live_throughout: 7, dead_or_set: 5
insn=152, live_throughout: 7, dead_or_set: 
insn=154, live_throughout: 7, dead_or_set: 63
insn=155, live_throughout: 7, 63, dead_or_set: 62
insn=156, live_throughout: 7, dead_or_set: 62, 63, 99, 100
insn=157, live_throughout: 7, dead_or_set: 61, 99
insn=158, live_throughout: 7, dead_or_set: 61
insn=159, live_throughout: 7, dead_or_set: 
insn=161, live_throughout: 7, dead_or_set: 4
insn=162, live_throughout: 4, 7, dead_or_set: 5
insn=163, live_throughout: 7, dead_or_set: 0, 4, 5
insn=164, live_throughout: 7, dead_or_set: 60
insn=165, live_throughout: 7, 60, dead_or_set: 59
insn=166, live_throughout: 7, 59, dead_or_set: 2, 60
insn=167, live_throughout: 2, 7, 59, dead_or_set: 1
insn=168, live_throughout: 1, 2, 7, dead_or_set: 4, 59
insn=169, live_throughout: 1, 2, 4, 7, dead_or_set: 101
insn=170, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 101
insn=171, live_throughout: 1, 2, 4, 5, 7, dead_or_set: 0
insn=172, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=173, live_throughout: 7, dead_or_set: 0
insn=174, live_throughout: 7, dead_or_set: 0
insn=175, live_throughout: 7, dead_or_set: 102
insn=176, live_throughout: 7, dead_or_set: 5, 102
insn=177, live_throughout: 7, dead_or_set: 0, 5
insn=178, live_throughout: 7, dead_or_set: 0, 58
insn=179, live_throughout: 7, 58, dead_or_set: 103
insn=180, live_throughout: 7, dead_or_set: 58, 103
insn=181, live_throughout: 7, dead_or_set: 
insn=183, live_throughout: 7, dead_or_set: 
insn=184, live_throughout: 7, dead_or_set: 76
insn=185, live_throughout: 7, 76, dead_or_set: 
insn=187, live_throughout: 7, dead_or_set: 76, 78
insn=191, live_throughout: 7, dead_or_set: 0, 78
insn=197, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 178
changing reg in insn 180
changing reg in insn 165
changing reg in insn 168
changing reg in insn 164
changing reg in insn 166
changing reg in insn 157
changing reg in insn 158
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 143
changing reg in insn 144
changing reg in insn 139
changing reg in insn 141
changing reg in insn 128
changing reg in insn 129
changing reg in insn 111
changing reg in insn 115
changing reg in insn 110
changing reg in insn 112
changing reg in insn 109
changing reg in insn 110
changing reg in insn 62
changing reg in insn 74
changing reg in insn 72
changing reg in insn 67
changing reg in insn 65
changing reg in insn 63
changing reg in insn 51
changing reg in insn 55
changing reg in insn 50
changing reg in insn 52
changing reg in insn 49
changing reg in insn 50
changing reg in insn 24
changing reg in insn 25
changing reg in insn 17
changing reg in insn 18
changing reg in insn 184
changing reg in insn 18
changing reg in insn 187
changing reg in insn 8
changing reg in insn 9
changing reg in insn 187
changing reg in insn 191
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
changing reg in insn 29
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 44
changing reg in insn 45
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 80
changing reg in insn 81
changing reg in insn 87
changing reg in insn 88
changing reg in insn 94
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 123
changing reg in insn 125
changing reg in insn 124
changing reg in insn 126
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 156
changing reg in insn 157
changing reg in insn 156
changing reg in insn 169
changing reg in insn 170
changing reg in insn 175
changing reg in insn 176
changing reg in insn 179
changing reg in insn 180
deleting insn with uid = 17.
deleting insn with uid = 18.
deleting insn with uid = 29.
deleting insn with uid = 34.
deleting insn with uid = 39.
deleting insn with uid = 44.
deleting insn with uid = 128.
deleting insn with uid = 139.
deleting insn with uid = 178.
deleting insn with uid = 187.
deleting insn with uid = 191.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 174.
verify found no changes in insn with uid = 177.


MPI_Init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={48d,38u} r1={29d,11u} r2={22d,5u} r4={26d,9u} r5={34d,17u} r6={1d,41u} r7={1d,45u} r8={17d} r9={17d} r10={17d} r11={17d} r12={17d} r13={17d} r14={17d} r15={17d} r17={35d,13u} r18={17d} r19={17d} r20={1d,1u} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={18d} r38={18d} r39={18d} r40={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} 
;;    total ref usage 1034{854d,180u,0e} in 130{113 regular + 17 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 77

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 rapl.c:55 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arg_0+0 S8 A64])
        (reg:DI 5 di [ arg_0 ])) 89 {*movdi_1_rex64} (nil))

(insn 3 2 4 2 rapl.c:55 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 arg_1+0 S8 A64])
        (reg:DI 4 si [ arg_1 ])) 89 {*movdi_1_rex64} (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 rapl.c:56 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 8 7 9 2 rapl.c:57 (set (reg:SI 0 ax [orig:77 in_wrapper.0 ] [77])
        (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 9 8 10 2 rapl.c:57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:77 in_wrapper.0 ] [77])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 10 9 11 2 rapl.c:57 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 76 79 80

;; Pred edge  2 (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 rapl.c:57 (set (reg:DI 1 dx [79])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 arg_1+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 13 12 14 3 rapl.c:57 (set (reg:DI 0 ax [80])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arg_0+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 14 13 15 3 rapl.c:57 (set (reg:DI 4 si)
        (reg:DI 1 dx [79])) 89 {*movdi_1_rex64} (nil))

(insn 15 14 16 3 rapl.c:57 (set (reg:DI 5 di)
        (reg:DI 0 ax [80])) 89 {*movdi_1_rex64} (nil))

(call_insn 16 15 208 3 rapl.c:57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PMPI_Init") [flags 0x41]  <function_decl 0x7fed12f1bd00 PMPI_Init>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(jump_insn 208 16 209 3 rapl.c:57 (set (pc)
        (label_ref 185)) 638 {jump} (nil))
;; End of basic block 3 -> ( 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76


;; Succ edge  28 [100.0%] 

(barrier 209 208 21)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74

;; Pred edge  2
(code_label 21 209 22 4 2 "" [1 uses])

(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 4 rapl.c:58 (set (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 24 23 25 4 rapl.c:60 (set (reg:SI 0 ax [orig:74 fortran_init.1 ] [74])
        (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 25 24 26 4 rapl.c:60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:74 fortran_init.1 ] [74])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 26 25 27 4 rapl.c:60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 4 -> ( 5 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  22

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81 82

;; Pred edge  4 (fallthru)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 30 5 rapl.c:62 (set (reg:DI 0 ax [82])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("PMPI_INIT") [flags 0x41]  <function_decl 0x7fed12c28100 PMPI_INIT>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 30 28 31 5 rapl.c:62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [81])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 31 30 32 5 rapl.c:62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  10

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84

;; Pred edge  5 (fallthru)
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 35 6 rapl.c:62 (set (reg:DI 0 ax [84])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("pmpi_init") [flags 0x41]  <function_decl 0x7fed12c28000 pmpi_init>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 35 33 36 6 rapl.c:62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [83])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 36 35 37 6 rapl.c:62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  10

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86

;; Pred edge  6 (fallthru)
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 40 7 rapl.c:62 (set (reg:DI 0 ax [86])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("pmpi_init_") [flags 0x41]  <function_decl 0x7fed12c28200 pmpi_init_>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 40 38 41 7 rapl.c:62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [85])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 41 40 42 7 rapl.c:62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 7 -> ( 8 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  10

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88

;; Pred edge  7 (fallthru)
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 45 8 rapl.c:62 (set (reg:DI 0 ax [88])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("pmpi_init__") [flags 0x41]  <function_decl 0x7fed12c28300 pmpi_init__>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 45 43 46 8 rapl.c:62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [87])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 46 45 47 8 rapl.c:62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  10

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71 72 73 89

;; Pred edge  8 (fallthru)
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 9 rapl.c:63 (set (reg/f:DI 0 ax [89])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fed12d9faa0 stderr>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 49 48 50 9 rapl.c:63 (set (reg/f:DI 0 ax [orig:73 stderr.2 ] [73])
        (mem/f/c/i:DI (reg/f:DI 0 ax [89]) [0 stderr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 50 49 51 9 rapl.c:63 (set (reg/f:DI 1 dx [orig:72 stderr.3 ] [72])
        (reg/f:DI 0 ax [orig:73 stderr.2 ] [73])) 89 {*movdi_1_rex64} (nil))

(insn 51 50 52 9 rapl.c:63 (set (reg/f:DI 0 ax [orig:71 D.6426 ] [71])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <string_cst 0x7fed12caed00>)) 89 {*movdi_1_rex64} (nil))

(insn 52 51 53 9 rapl.c:63 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:72 stderr.3 ] [72])) 89 {*movdi_1_rex64} (nil))

(insn 53 52 54 9 rapl.c:63 (set (reg:DI 1 dx)
        (const_int 87 [0x57])) 89 {*movdi_1_rex64} (nil))

(insn 54 53 55 9 rapl.c:63 (set (reg:DI 4 si)
        (const_int 1 [0x1])) 89 {*movdi_1_rex64} (nil))

(insn 55 54 56 9 rapl.c:63 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:71 D.6426 ] [71])) 89 {*movdi_1_rex64} (nil))

(call_insn 56 55 57 9 rapl.c:63 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fed12fc2b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(insn 57 56 58 9 rapl.c:64 (set (reg:SI 5 di)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(call_insn 58 57 59 9 rapl.c:64 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fed12fd7c00 exit>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (nil)))
;; End of basic block 9 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 59 58 60)

;; Start of basic block ( 5 6 7 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70

;; Pred edge  5
;; Pred edge  6
;; Pred edge  7
;; Pred edge  8
(code_label 60 59 61 10 5 "" [4 uses])

(note 61 60 62 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 63 10 rapl.c:65 (set (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
        (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 63 62 64 10 rapl.c:65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 64 63 199 10 rapl.c:65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 10 -> ( 18 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70


;; Succ edge  18
;; Succ edge  11 (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  def 	 17 [flags]

;; Pred edge  10 (fallthru)
(note 199 64 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 65 199 66 11 rapl.c:65 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 66 65 200 11 rapl.c:65 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70


;; Succ edge  14
;; Succ edge  12 (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  def 	 17 [flags]

;; Pred edge  11 (fallthru)
(note 200 66 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 67 200 68 12 rapl.c:65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 68 67 210 12 rapl.c:65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 12 -> ( 17 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17
;; Succ edge  13 (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  12 (fallthru)
(note 210 68 211 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 211 210 212 13 rapl.c:65 (set (pc)
        (label_ref 106)) 638 {jump} (nil))
;; End of basic block 13 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 212 211 71)

;; Start of basic block ( 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  def 	 17 [flags]

;; Pred edge  11
(code_label 71 212 202 14 11 "" [1 uses])

(note 202 71 72 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 72 202 73 14 rapl.c:65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
            (const_int 3 [0x3]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 73 72 203 14 rapl.c:65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 14 -> ( 19 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70


;; Succ edge  19
;; Succ edge  15 (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 70
;; lr  def 	 17 [flags]

;; Pred edge  14 (fallthru)
(note 203 73 74 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 74 203 75 15 rapl.c:65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 fortran_init.4 ] [70])
            (const_int 4 [0x4]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 75 74 213 15 rapl.c:65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 15 -> ( 20 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20
;; Succ edge  16 (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  15 (fallthru)
(note 213 75 214 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(jump_insn 214 213 215 16 rapl.c:65 (set (pc)
        (label_ref 106)) 638 {jump} (nil))
;; End of basic block 16 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 215 214 78)

;; Start of basic block ( 12) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 90

;; Pred edge  12
(code_label 78 215 79 17 7 "" [1 uses])

(note 79 78 80 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 17 rapl.c:66 (parallel [
            (set (reg:DI 0 ax [90])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 81 80 82 17 rapl.c:66 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) 89 {*movdi_1_rex64} (nil))

(call_insn 82 81 216 17 rapl.c:66 (call (mem:QI (symbol_ref/i:DI ("PMPI_INIT") [flags 0x41]  <function_decl 0x7fed12c28100 PMPI_INIT>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(jump_insn 216 82 217 17 rapl.c:66 (set (pc)
        (label_ref 130)) 638 {jump} (nil))
;; End of basic block 17 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 217 216 85)

;; Start of basic block ( 10) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 91

;; Pred edge  10
(code_label 85 217 86 18 8 "" [1 uses])

(note 86 85 87 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 87 86 88 18 rapl.c:67 (parallel [
            (set (reg:DI 0 ax [91])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 88 87 89 18 rapl.c:67 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) 89 {*movdi_1_rex64} (nil))

(call_insn 89 88 218 18 rapl.c:67 (call (mem:QI (symbol_ref/i:DI ("pmpi_init") [flags 0x41]  <function_decl 0x7fed12c28000 pmpi_init>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(jump_insn 218 89 219 18 rapl.c:67 (set (pc)
        (label_ref 130)) 638 {jump} (nil))
;; End of basic block 18 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 219 218 92)

;; Start of basic block ( 14) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 92

;; Pred edge  14
(code_label 92 219 93 19 9 "" [1 uses])

(note 93 92 94 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 19 rapl.c:68 (parallel [
            (set (reg:DI 0 ax [92])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 95 94 96 19 rapl.c:68 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) 89 {*movdi_1_rex64} (nil))

(call_insn 96 95 220 19 rapl.c:68 (call (mem:QI (symbol_ref/i:DI ("pmpi_init_") [flags 0x41]  <function_decl 0x7fed12c28200 pmpi_init_>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(jump_insn 220 96 221 19 rapl.c:68 (set (pc)
        (label_ref 130)) 638 {jump} (nil))
;; End of basic block 19 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 221 220 99)

;; Start of basic block ( 15) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 93

;; Pred edge  15
(code_label 99 221 100 20 10 "" [1 uses])

(note 100 99 101 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 101 100 102 20 rapl.c:69 (parallel [
            (set (reg:DI 0 ax [93])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 102 101 103 20 rapl.c:69 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) 89 {*movdi_1_rex64} (nil))

(call_insn 103 102 207 20 rapl.c:69 (call (mem:QI (symbol_ref/i:DI ("pmpi_init__") [flags 0x41]  <function_decl 0x7fed12c28300 pmpi_init__>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 207 103 222 20 rapl.c:69 (const_int 0 [0x0]) 660 {nop} (nil))

(jump_insn 222 207 223 20 (set (pc)
        (label_ref 130)) 638 {jump} (nil))
;; End of basic block 20 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 223 222 106)

;; Start of basic block ( 13 16) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 94

;; Pred edge  13 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 106 223 107 21 6 "" [2 uses])

(note 107 106 108 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 109 21 rapl.c:71 (set (reg/f:DI 0 ax [94])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fed12d9faa0 stderr>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 109 108 110 21 rapl.c:71 (set (reg/f:DI 0 ax [orig:69 stderr.5 ] [69])
        (mem/f/c/i:DI (reg/f:DI 0 ax [94]) [0 stderr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 110 109 111 21 rapl.c:71 (set (reg/f:DI 1 dx [orig:68 stderr.6 ] [68])
        (reg/f:DI 0 ax [orig:69 stderr.5 ] [69])) 89 {*movdi_1_rex64} (nil))

(insn 111 110 112 21 rapl.c:71 (set (reg/f:DI 0 ax [orig:67 D.6430 ] [67])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <string_cst 0x7fed12b4ba00>)) 89 {*movdi_1_rex64} (nil))

(insn 112 111 113 21 rapl.c:71 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:68 stderr.6 ] [68])) 89 {*movdi_1_rex64} (nil))

(insn 113 112 114 21 rapl.c:71 (set (reg:DI 1 dx)
        (const_int 37 [0x25])) 89 {*movdi_1_rex64} (nil))

(insn 114 113 115 21 rapl.c:71 (set (reg:DI 4 si)
        (const_int 1 [0x1])) 89 {*movdi_1_rex64} (nil))

(insn 115 114 116 21 rapl.c:71 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:67 D.6430 ] [67])) 89 {*movdi_1_rex64} (nil))

(call_insn 116 115 224 21 rapl.c:71 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fed12fc2b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(jump_insn 224 116 225 21 rapl.c:71 (set (pc)
        (label_ref 130)) 638 {jump} (nil))
;; End of basic block 21 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23

(barrier 225 224 121)

;; Start of basic block ( 4) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 95 96

;; Pred edge  4
(code_label 121 225 122 22 4 "" [1 uses])

(note 122 121 123 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 124 22 rapl.c:78 (set (reg:DI 1 dx [95])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 arg_1+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 124 123 125 22 rapl.c:78 (set (reg:DI 0 ax [96])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arg_0+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 125 124 126 22 rapl.c:78 (set (reg:DI 4 si)
        (reg:DI 1 dx [95])) 89 {*movdi_1_rex64} (nil))

(insn 126 125 127 22 rapl.c:78 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) 89 {*movdi_1_rex64} (nil))

(call_insn 127 126 129 22 rapl.c:78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PMPI_Init") [flags 0x41]  <function_decl 0x7fed12f1bd00 PMPI_Init>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 129 127 130 22 rapl.c:78 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (reg:SI 0 ax [orig:66 _wrap_py_return_val.7 ] [66])) 47 {*movsi_1} (nil))
;; End of basic block 22 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 (fallthru)

;; Start of basic block ( 19 22 20 18 17 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 97 98

;; Pred edge  19 [100.0%] 
;; Pred edge  22 (fallthru)
;; Pred edge  20 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  21
(code_label 130 129 131 23 13 "" [5 uses])

(note 131 130 132 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 23 rapl.c:81 (set (mem/c/i:SI (symbol_ref:DI ("rank") [flags 0x2]  <var_decl 0x7fed12c8e6e0 rank>) [0 rank+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 47 {*movsi_1} (nil))

(insn 133 132 134 23 rapl.c:82 (set (reg:DI 4 si)
        (symbol_ref:DI ("rank") [flags 0x2]  <var_decl 0x7fed12c8e6e0 rank>)) 89 {*movdi_1_rex64} (nil))

(insn 134 133 135 23 rapl.c:82 (set (reg:SI 5 di)
        (const_int 1140850688 [0x44000000])) 47 {*movsi_1} (nil))

(call_insn 135 134 136 23 rapl.c:82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PMPI_Comm_rank") [flags 0x41]  <function_decl 0x7fed12f0f500 PMPI_Comm_rank>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 136 135 137 23 rapl.c:83 (set (reg:DI 4 si)
        (symbol_ref:DI ("msr_rank_mod") [flags 0x2]  <var_decl 0x7fed12c8eb40 msr_rank_mod>)) 89 {*movdi_1_rex64} (nil))

(insn 137 136 138 23 rapl.c:83 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <string_cst 0x7fed12b48500>)) 89 {*movdi_1_rex64} (nil))

(call_insn 138 137 140 23 rapl.c:83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_env_int") [flags 0x41]  <function_decl 0x7fed12c9a200 get_env_int>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 140 138 141 23 rapl.c:83 (set (reg/f:DI 1 dx [97])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("retVal")  <var_decl 0x7fed12c8eaa0 retVal>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 141 140 142 23 rapl.c:83 (set (mem/c/i:SI (reg/f:DI 1 dx [97]) [0 retVal+0 S4 A32])
        (reg:SI 0 ax [orig:65 retVal.8 ] [65])) 47 {*movsi_1} (nil))

(insn 142 141 143 23 rapl.c:85 (set (reg/f:DI 0 ax [98])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("retVal")  <var_decl 0x7fed12c8eaa0 retVal>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 143 142 144 23 rapl.c:85 (set (reg:SI 0 ax [orig:64 retVal.9 ] [64])
        (mem/c/i:SI (reg/f:DI 0 ax [98]) [0 retVal+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 144 143 145 23 rapl.c:85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 retVal.9 ] [64])
            (const_int -1 [0xffffffffffffffff]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 145 144 146 23 rapl.c:85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 152)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)
;; Succ edge  25

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  23 (fallthru)
(note 146 145 147 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 147 146 148 24 rapl.c:86 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <string_cst 0x7fed12caee00>)) 89 {*movdi_1_rex64} (nil))

(call_insn 148 147 149 24 rapl.c:86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fed12fc5700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 149 148 150 24 rapl.c:87 (set (reg:SI 5 di)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(call_insn 150 149 151 24 rapl.c:87 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fed12fd7c00 exit>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (nil)))
;; End of basic block 24 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 151 150 152)

;; Start of basic block ( 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 99 100

;; Pred edge  23
(code_label 152 151 153 25 14 "" [1 uses])

(note 153 152 154 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 154 153 155 25 rapl.c:90 (set (reg:SI 0 ax [orig:63 rank.10 ] [63])
        (mem/c/i:SI (symbol_ref:DI ("rank") [flags 0x2]  <var_decl 0x7fed12c8e6e0 rank>) [0 rank+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 155 154 156 25 rapl.c:90 (set (reg:SI 2 cx [orig:62 msr_rank_mod.11 ] [62])
        (mem/c/i:SI (symbol_ref:DI ("msr_rank_mod") [flags 0x2]  <var_decl 0x7fed12c8eb40 msr_rank_mod>) [0 msr_rank_mod+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 156 155 157 25 rapl.c:90 (parallel [
            (set (reg:SI 0 ax [100])
                (div:SI (reg:SI 0 ax [orig:63 rank.10 ] [63])
                    (reg:SI 2 cx [orig:62 msr_rank_mod.11 ] [62])))
            (set (reg:SI 1 dx [99])
                (mod:SI (reg:SI 0 ax [orig:63 rank.10 ] [63])
                    (reg:SI 2 cx [orig:62 msr_rank_mod.11 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) 355 {*divmodsi4_nocltd} (nil))

(insn 157 156 158 25 rapl.c:90 (set (reg:SI 0 ax [orig:61 D.6439 ] [61])
        (reg:SI 1 dx [99])) 47 {*movsi_1} (nil))

(insn 158 157 159 25 rapl.c:90 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:61 D.6439 ] [61])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 159 158 160 25 rapl.c:90 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 181)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26 (fallthru)
;; Succ edge  27

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 101 102 103

;; Pred edge  25 (fallthru)
(note 160 159 161 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 26 rapl.c:91 (set (reg:DI 4 si)
        (const_int 1024 [0x400])) 89 {*movdi_1_rex64} (nil))

(insn 162 161 163 26 rapl.c:91 (set (reg:DI 5 di)
        (symbol_ref:DI ("hostname") [flags 0x2]  <var_decl 0x7fed12c8e780 hostname>)) 89 {*movdi_1_rex64} (nil))

(call_insn 163 162 164 26 rapl.c:91 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("gethostname") [flags 0x41]  <function_decl 0x7fed12c71a00 gethostname>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 164 163 165 26 rapl.c:93 (set (reg:SI 1 dx [orig:60 rank.12 ] [60])
        (mem/c/i:SI (symbol_ref:DI ("rank") [flags 0x2]  <var_decl 0x7fed12c8e6e0 rank>) [0 rank+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 165 164 166 26 rapl.c:93 (set (reg/f:DI 0 ax [orig:59 D.6443 ] [59])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <string_cst 0x7fed12b4d240>)) 89 {*movdi_1_rex64} (nil))

(insn 166 165 167 26 rapl.c:93 (set (reg:SI 2 cx)
        (reg:SI 1 dx [orig:60 rank.12 ] [60])) 47 {*movsi_1} (nil))

(insn 167 166 168 26 rapl.c:93 (set (reg:DI 1 dx)
        (symbol_ref:DI ("hostname") [flags 0x2]  <var_decl 0x7fed12c8e780 hostname>)) 89 {*movdi_1_rex64} (nil))

(insn 168 167 169 26 rapl.c:93 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:59 D.6443 ] [59])) 89 {*movdi_1_rex64} (nil))

(insn 169 168 170 26 rapl.c:93 (set (reg:DI 0 ax [101])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("filetag")  <var_decl 0x7fed12c8ea00 filetag>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 170 169 171 26 rapl.c:93 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) 89 {*movdi_1_rex64} (expr_list:REG_EQUAL (symbol_ref:DI ("filetag")  <var_decl 0x7fed12c8ea00 filetag>)
        (nil)))

(insn 171 170 172 26 rapl.c:93 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 172 171 173 26 rapl.c:93 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7fed12fc7000 sprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (nil)))))))

(insn 173 172 174 26 rapl.c:95 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 174 173 175 26 rapl.c:95 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("register_sig") [flags 0x41]  <function_decl 0x7fed12c9a500 register_sig>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 175 174 176 26 rapl.c:99 (set (reg:DI 0 ax [102])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("filetag")  <var_decl 0x7fed12c8ea00 filetag>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 176 175 177 26 rapl.c:99 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) 89 {*movdi_1_rex64} (expr_list:REG_EQUAL (symbol_ref:DI ("filetag")  <var_decl 0x7fed12c8ea00 filetag>)
        (nil)))

(call_insn 177 176 179 26 rapl.c:99 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rapl_init") [flags 0x41]  <function_decl 0x7fed12c88300 rapl_init>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 179 177 180 26 rapl.c:99 (set (reg/f:DI 1 dx [103])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("s")  <var_decl 0x7fed12c8e960 s>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 180 179 181 26 rapl.c:99 (set (mem/f/c/i:DI (reg/f:DI 1 dx [103]) [0 s+0 S8 A64])
        (reg/f:DI 0 ax [orig:58 s.13 ] [58])) 89 {*movdi_1_rex64} (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27 (fallthru)

;; Start of basic block ( 25 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 76

;; Pred edge  25
;; Pred edge  26 (fallthru)
(code_label 181 180 182 27 15 "" [1 uses])

(note 182 181 183 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 184 27 rapl.c:101 (set (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 184 183 185 27 rapl.c:102 (set (reg:SI 0 ax [orig:76 D.6411 ] [76])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])) 47 {*movsi_1} (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76


;; Succ edge  28 (fallthru)

;; Start of basic block ( 27 3) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76
;; lr  def 	 0 [ax] 78

;; Pred edge  27 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 185 184 186 28 3 "" [1 uses])

(note 186 185 197 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 197 186 226 28 rapl.c:103 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 28 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 226 197 0 NOTE_INSN_DELETED)


;; Function MPI_Init_fortran_wrapper (MPI_Init_fortran_wrapper)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r62: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS
    a0 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred DIREG, alternative GENERAL_REGS
    a3 (r60,l0) best DIREG, cover GENERAL_REGS
    r59: preferred SIREG, alternative GENERAL_REGS
    a4 (r59,l0) best SIREG, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS
    a2 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a2(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 18(l0): point = 0
   Insn 17(l0): point = 2
   Insn 16(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 13(l0): point = 10
   Insn 12(l0): point = 12
   Insn 11(l0): point = 14
   Insn 10(l0): point = 16
   Insn 9(l0): point = 18
   Insn 8(l0): point = 20
   Insn 7(l0): point = 22
   Insn 6(l0): point = 24
   Insn 2(l0): point = 26
 a0(r61): [1..4]
 a1(r62): [1..2]
 a2(r58): [7..8]
 a3(r60): [13..16]
 a4(r59): [15..18]
Compressing live ranges: from 29 to 9 - 31%
Ranges after the compression:
 a0(r61): [0..2]
 a1(r62): [0..1]
 a2(r58): [3..4]
 a3(r60): [5..7]
 a4(r59): [6..8]
  regions=1, blocks=3, points=9
    allocnos=5, copies=0, conflicts=0, ranges=5
Disposition:
    2:r58  l0     0    4:r59  l0     1    3:r60  l0     0    0:r61  l0     0
    1:r62  l0     1
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 59
insn=10, live_throughout: 7, 59, dead_or_set: 60
insn=11, live_throughout: 7, 60, dead_or_set: 4, 59
insn=12, live_throughout: 4, 7, dead_or_set: 5, 60
insn=13, live_throughout: 7, dead_or_set: 0, 4, 5
insn=14, live_throughout: 7, dead_or_set: 0, 58
insn=15, live_throughout: 7, dead_or_set: 58
insn=16, live_throughout: 7, dead_or_set: 61
insn=17, live_throughout: 7, 61, dead_or_set: 62
insn=18, live_throughout: 7, dead_or_set: 61, 62
changing reg in insn 14
changing reg in insn 15
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 12
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.


MPI_Init_fortran_wrapper

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={4d,3u} r1={4d,2u} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,11u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 94{71d,23u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 61 62

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:106 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:107 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 argc+0 S4 A64])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:108 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 argv+0 S8 A64])
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 rapl.c:109 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 9 8 10 2 rapl.c:110 (parallel [
            (set (reg:DI 1 dx [59])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 10 9 11 2 rapl.c:110 (parallel [
            (set (reg:DI 0 ax [60])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 11 10 12 2 rapl.c:110 (set (reg:DI 4 si)
        (reg:DI 1 dx [59])) 89 {*movdi_1_rex64} (nil))

(insn 12 11 13 2 rapl.c:110 (set (reg:DI 5 di)
        (reg:DI 0 ax [60])) 89 {*movdi_1_rex64} (nil))

(call_insn 13 12 15 2 rapl.c:110 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("MPI_Init") [flags 0x1]  <function_decl 0x7fed12eb2c00 MPI_Init>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 15 13 16 2 rapl.c:110 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (reg:SI 0 ax [orig:58 _wrap_py_return_val.14 ] [58])) 47 {*movsi_1} (nil))

(insn 16 15 17 2 rapl.c:111 (set (reg/f:DI 0 ax [61])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 17 16 18 2 rapl.c:111 (set (reg:SI 1 dx [62])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 18 17 26 2 rapl.c:111 (set (mem:SI (reg/f:DI 0 ax [61]) [0 S4 A32])
        (reg:SI 1 dx [62])) 47 {*movsi_1} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 18 0 NOTE_INSN_DELETED)


;; Function MPI_INIT (MPI_INIT)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 2(l0): point = 8
 a0(r58): [3..4]
Compressing live ranges: from 11 to 2 - 18%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 58
insn=8, live_throughout: 7, dead_or_set: 5, 58
insn=9, live_throughout: 7, dead_or_set: 5
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


MPI_INIT

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:114 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:115 (set (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:116 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 rapl.c:116 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 9 8 17 2 rapl.c:116 (call (mem:QI (symbol_ref:DI ("MPI_Init_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12c9a800 MPI_Init_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 17 9 0 NOTE_INSN_DELETED)


;; Function mpi_init (mpi_init)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 2(l0): point = 8
 a0(r58): [3..4]
Compressing live ranges: from 11 to 2 - 18%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 58
insn=8, live_throughout: 7, dead_or_set: 5, 58
insn=9, live_throughout: 7, dead_or_set: 5
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


mpi_init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:119 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:120 (set (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:121 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 rapl.c:121 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 9 8 17 2 rapl.c:121 (call (mem:QI (symbol_ref:DI ("MPI_Init_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12c9a800 MPI_Init_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 17 9 0 NOTE_INSN_DELETED)


;; Function mpi_init_ (mpi_init_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 2(l0): point = 8
 a0(r58): [3..4]
Compressing live ranges: from 11 to 2 - 18%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 58
insn=8, live_throughout: 7, dead_or_set: 5, 58
insn=9, live_throughout: 7, dead_or_set: 5
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


mpi_init_

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:124 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:125 (set (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])
        (const_int 3 [0x3])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:126 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 rapl.c:126 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 9 8 17 2 rapl.c:126 (call (mem:QI (symbol_ref:DI ("MPI_Init_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12c9a800 MPI_Init_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 17 9 0 NOTE_INSN_DELETED)


;; Function mpi_init__ (mpi_init__)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 2(l0): point = 8
 a0(r58): [3..4]
Compressing live ranges: from 11 to 2 - 18%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 58
insn=8, live_throughout: 7, dead_or_set: 5, 58
insn=9, live_throughout: 7, dead_or_set: 5
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


mpi_init__

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:129 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:130 (set (mem/c/i:SI (symbol_ref:DI ("fortran_init") [flags 0x2]  <var_decl 0x7fed12c8ebe0 fortran_init>) [0 fortran_init+0 S4 A32])
        (const_int 4 [0x4])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:131 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 rapl.c:131 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 9 8 17 2 rapl.c:131 (call (mem:QI (symbol_ref:DI ("MPI_Init_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12c9a800 MPI_Init_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 17 9 0 NOTE_INSN_DELETED)


;; Function MPI_Finalize (MPI_Finalize)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS
    a4 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred AREG, alternative GENERAL_REGS
    a7 (r68,l0) best AREG, cover GENERAL_REGS
    r67: preferred DREG, alternative GENERAL_REGS
    a6 (r67,l0) best DREG, cover GENERAL_REGS
    r66: preferred AREG, alternative GENERAL_REGS
    a0 (r66,l0) best AREG, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS
    a11 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS
    a10 (r63,l0) best AREG, cover GENERAL_REGS
    r62: preferred DREG, alternative GENERAL_REGS
    a9 (r62,l0) best DREG, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS
    a8 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS
    a5 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS
    a3 (r59,l0) best DIREG, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS
    a2 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r66,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a2(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a5(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a6(r67,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r68,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 MEM:4
  a8(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a9(r62,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a10(r63,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 49(l0): point = 0
   Insn 43(l0): point = 2
   Insn 39(l0): point = 4
   Insn 36(l0): point = 7
   Insn 35(l0): point = 9
   Insn 34(l0): point = 11
   Insn 33(l0): point = 13
   Insn 32(l0): point = 15
   Insn 29(l0): point = 18
   Insn 28(l0): point = 20
   Insn 27(l0): point = 22
   Insn 26(l0): point = 24
   Insn 25(l0): point = 26
   Insn 23(l0): point = 29
   Insn 22(l0): point = 31
   Insn 21(l0): point = 33
   Insn 20(l0): point = 35
   Insn 19(l0): point = 41
   Insn 18(l0): point = 43
   Insn 17(l0): point = 45
   Insn 53(l0): point = 48
   Insn 12(l0): point = 50
   Insn 11(l0): point = 52
   Insn 10(l0): point = 54
   Insn 8(l0): point = 57
   Insn 7(l0): point = 59
   Insn 6(l0): point = 61
   Insn 5(l0): point = 63
 a0(r66): [3..4]
 a1(r64): [48..50] [5..7]
 a2(r58): [12..13]
 a3(r59): [21..24]
 a4(r69): [25..26]
 a5(r60): [32..33]
 a6(r67): [39..39] [37..37] [34..35]
 a7(r68): [35..36]
 a8(r61): [36..41]
 a9(r62): [40..43] [38..38]
 a10(r63): [51..52]
 a11(r65): [60..61]
Compressing live ranges: from 66 to 27 - 40%
Ranges after the compression:
 a0(r66): [0..1]
 a1(r64): [21..22] [2..3]
 a2(r58): [4..5]
 a3(r59): [6..7]
 a4(r69): [8..9]
 a5(r60): [10..11]
 a6(r67): [17..17] [15..15] [12..13]
 a7(r68): [13..14]
 a8(r61): [14..19]
 a9(r62): [18..20] [16..16]
 a10(r63): [23..24]
 a11(r65): [25..26]
  regions=1, blocks=8, points=27
    allocnos=12, copies=0, conflicts=0, ranges=16
Disposition:
    2:r58  l0     0    3:r59  l0     0    5:r60  l0     0    8:r61  l0     2
    9:r62  l0     0   10:r63  l0     0    1:r64  l0     0   11:r65  l0     0
    0:r66  l0     0    6:r67  l0     1    7:r68  l0     0    4:r69  l0     0
+++Costs: overall -4, reg -4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 65
insn=7, live_throughout: 7, dead_or_set: 65
insn=8, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 0
insn=11, live_throughout: 7, dead_or_set: 0, 63
insn=12, live_throughout: 7, dead_or_set: 63, 64
insn=53, live_throughout: 7, 64, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 62
insn=19, live_throughout: 7, 62, dead_or_set: 61
insn=20, live_throughout: 7, dead_or_set: 61, 62, 67, 68
insn=21, live_throughout: 7, dead_or_set: 60, 67
insn=22, live_throughout: 7, dead_or_set: 60
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 69
insn=26, live_throughout: 7, dead_or_set: 59, 69
insn=27, live_throughout: 7, 59, dead_or_set: 4
insn=28, live_throughout: 4, 7, dead_or_set: 5, 59
insn=29, live_throughout: 7, dead_or_set: 4, 5
insn=30, live_throughout: 7, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 0
insn=33, live_throughout: 7, dead_or_set: 0, 58
insn=34, live_throughout: 7, dead_or_set: 58
insn=35, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 64
insn=37, live_throughout: 7, 64, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 64, 66
insn=43, live_throughout: 7, dead_or_set: 0, 66
insn=49, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 33
changing reg in insn 34
changing reg in insn 26
changing reg in insn 28
changing reg in insn 21
changing reg in insn 22
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 11
changing reg in insn 12
changing reg in insn 36
changing reg in insn 12
changing reg in insn 39
changing reg in insn 6
changing reg in insn 7
changing reg in insn 39
changing reg in insn 43
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
deleting insn with uid = 11.
deleting insn with uid = 12.
deleting insn with uid = 33.
deleting insn with uid = 39.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 32.


MPI_Finalize

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,9u} r1={5d,1u} r2={5d,2u} r4={5d,1u} r5={5d,1u} r6={1d,10u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={4d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 202{165d,37u,0e} in 23{20 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 rapl.c:142 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 _wrap_py_return_val+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 6 5 7 2 rapl.c:143 (set (reg:SI 0 ax [orig:65 in_wrapper.15 ] [65])
        (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 7 6 8 2 rapl.c:143 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:65 in_wrapper.15 ] [65])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 8 7 9 2 rapl.c:143 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64

;; Pred edge  2 (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 10 9 53 3 rapl.c:143 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PMPI_Finalize") [flags 0x41]  <function_decl 0x7fed12f1be00 PMPI_Finalize>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (nil))

(jump_insn 53 10 54 3 rapl.c:143 (set (pc)
        (label_ref 37)) 638 {jump} (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64


;; Succ edge  7 [100.0%] 

(barrier 54 53 15)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 67 68

;; Pred edge  2
(code_label 15 54 16 4 28 "" [1 uses])

(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 rapl.c:144 (set (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 18 17 19 4 rapl.c:147 (set (reg:SI 0 ax [orig:62 rank.16 ] [62])
        (mem/c/i:SI (symbol_ref:DI ("rank") [flags 0x2]  <var_decl 0x7fed12c8e6e0 rank>) [0 rank+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 19 18 20 4 rapl.c:147 (set (reg:SI 2 cx [orig:61 msr_rank_mod.17 ] [61])
        (mem/c/i:SI (symbol_ref:DI ("msr_rank_mod") [flags 0x2]  <var_decl 0x7fed12c8eb40 msr_rank_mod>) [0 msr_rank_mod+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 20 19 21 4 rapl.c:147 (parallel [
            (set (reg:SI 0 ax [68])
                (div:SI (reg:SI 0 ax [orig:62 rank.16 ] [62])
                    (reg:SI 2 cx [orig:61 msr_rank_mod.17 ] [61])))
            (set (reg:SI 1 dx [67])
                (mod:SI (reg:SI 0 ax [orig:62 rank.16 ] [62])
                    (reg:SI 2 cx [orig:61 msr_rank_mod.17 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) 355 {*divmodsi4_nocltd} (nil))

(insn 21 20 22 4 rapl.c:147 (set (reg:SI 0 ax [orig:60 D.6476 ] [60])
        (reg:SI 1 dx [67])) 47 {*movsi_1} (nil))

(insn 22 21 23 4 rapl.c:147 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:60 D.6476 ] [60])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 23 22 24 4 rapl.c:147 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 69

;; Pred edge  4 (fallthru)
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 5 rapl.c:148 (set (reg/f:DI 0 ax [69])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("s")  <var_decl 0x7fed12c8e960 s>)
                    ] 2)) [0 S8 A8])) 89 {*movdi_1_rex64} (nil))

(insn 26 25 27 5 rapl.c:148 (set (reg/f:DI 0 ax [orig:59 s.18 ] [59])
        (mem/f/c/i:DI (reg/f:DI 0 ax [69]) [0 s+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 27 26 28 5 rapl.c:148 (set (reg:SI 4 si)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 28 27 29 5 rapl.c:148 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 s.18 ] [59])) 89 {*movdi_1_rex64} (nil))

(call_insn 29 28 30 5 rapl.c:148 (call (mem:QI (symbol_ref:DI ("rapl_finalize") [flags 0x41]  <function_decl 0x7fed12c88400 rapl_finalize>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 64

;; Pred edge  4
;; Pred edge  5 (fallthru)
(code_label 30 29 31 6 30 "" [1 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn 32 31 34 6 rapl.c:150 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("PMPI_Finalize") [flags 0x41]  <function_decl 0x7fed12f1be00 PMPI_Finalize>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (nil))

(insn 34 32 35 6 rapl.c:150 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 _wrap_py_return_val+0 S4 A32])
        (reg:SI 0 ax [orig:58 _wrap_py_return_val.19 ] [58])) 47 {*movsi_1} (nil))

(insn 35 34 36 6 rapl.c:151 (set (mem/c/i:SI (symbol_ref:DI ("in_wrapper") [flags 0x2]  <var_decl 0x7fed12e05460 in_wrapper>) [0 in_wrapper+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 36 35 37 6 rapl.c:152 (set (reg:SI 0 ax [orig:64 D.6472 ] [64])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 _wrap_py_return_val+0 S4 A32])) 47 {*movsi_1} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 3) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64
;; lr  def 	 0 [ax] 66

;; Pred edge  6 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 37 36 38 7 29 "" [1 uses])

(note 38 37 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 49 38 55 7 rapl.c:153 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 55 49 0 NOTE_INSN_DELETED)


;; Function MPI_Finalize_fortran_wrapper (MPI_Finalize_fortran_wrapper)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r60: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS
    a0 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS
    a2 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a2(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 12(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 6(l0): point = 12
   Insn 2(l0): point = 14
 a0(r59): [1..4]
 a1(r60): [1..2]
 a2(r58): [7..8]
Compressing live ranges: from 17 to 5 - 29%
Ranges after the compression:
 a0(r59): [0..2]
 a1(r60): [0..1]
 a2(r58): [3..4]
  regions=1, blocks=3, points=5
    allocnos=3, copies=0, conflicts=0, ranges=3
Disposition:
    2:r58  l0     0    0:r59  l0     0    1:r60  l0     1
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 0
insn=8, live_throughout: 7, dead_or_set: 0, 58
insn=9, live_throughout: 7, dead_or_set: 58
insn=10, live_throughout: 7, dead_or_set: 59
insn=11, live_throughout: 7, 59, dead_or_set: 60
insn=12, live_throughout: 7, dead_or_set: 59, 60
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.


MPI_Finalize_fortran_wrapper

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={2d} r4={2d} r5={2d,1u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 80{65d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:156 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:157 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(call_insn 7 6 9 2 rapl.c:158 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("MPI_Finalize") [flags 0x1]  <function_decl 0x7fed12eb2d00 MPI_Finalize>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (nil))

(insn 9 7 10 2 rapl.c:158 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])
        (reg:SI 0 ax [orig:58 _wrap_py_return_val.20 ] [58])) 47 {*movsi_1} (nil))

(insn 10 9 11 2 rapl.c:159 (set (reg/f:DI 0 ax [59])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 11 10 12 2 rapl.c:159 (set (reg:SI 1 dx [60])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 _wrap_py_return_val+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 12 11 20 2 rapl.c:159 (set (mem:SI (reg/f:DI 0 ax [59]) [0 S4 A32])
        (reg:SI 1 dx [60])) 47 {*movsi_1} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 20 12 0 NOTE_INSN_DELETED)


;; Function MPI_FINALIZE (MPI_FINALIZE)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
   Insn 6(l0): point = 4
   Insn 2(l0): point = 6
 a0(r58): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 5, 58
insn=8, live_throughout: 7, dead_or_set: 5
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


MPI_FINALIZE

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:162 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:163 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 7 6 8 2 rapl.c:163 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 8 7 16 2 rapl.c:163 (call (mem:QI (symbol_ref:DI ("MPI_Finalize_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12cb0500 MPI_Finalize_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 16 8 0 NOTE_INSN_DELETED)


;; Function mpi_finalize (mpi_finalize)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
   Insn 6(l0): point = 4
   Insn 2(l0): point = 6
 a0(r58): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 5, 58
insn=8, live_throughout: 7, dead_or_set: 5
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


mpi_finalize

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:166 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:167 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 7 6 8 2 rapl.c:167 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 8 7 16 2 rapl.c:167 (call (mem:QI (symbol_ref:DI ("MPI_Finalize_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12cb0500 MPI_Finalize_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 16 8 0 NOTE_INSN_DELETED)


;; Function mpi_finalize_ (mpi_finalize_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
   Insn 6(l0): point = 4
   Insn 2(l0): point = 6
 a0(r58): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 5, 58
insn=8, live_throughout: 7, dead_or_set: 5
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


mpi_finalize_

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:170 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:171 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 7 6 8 2 rapl.c:171 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 8 7 16 2 rapl.c:171 (call (mem:QI (symbol_ref:DI ("MPI_Finalize_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12cb0500 MPI_Finalize_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 16 8 0 NOTE_INSN_DELETED)


;; Function mpi_finalize__ (mpi_finalize__)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r58: preferred DIREG, alternative GENERAL_REGS
    a0 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
   Insn 6(l0): point = 4
   Insn 2(l0): point = 6
 a0(r58): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r58): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1
Disposition:
    0:r58  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 5, 58
insn=8, live_throughout: 7, dead_or_set: 5
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


mpi_finalize__

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={2d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 76{65d,11u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 rapl.c:174 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])
        (reg:DI 5 di [ ierr ])) 89 {*movdi_1_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 rapl.c:175 (set (reg:DI 0 ax [58])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ierr+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 7 6 8 2 rapl.c:175 (set (reg:DI 5 di)
        (reg:DI 0 ax [58])) 89 {*movdi_1_rex64} (nil))

(call_insn 8 7 16 2 rapl.c:175 (call (mem:QI (symbol_ref:DI ("MPI_Finalize_fortran_wrapper") [flags 0x3]  <function_decl 0x7fed12cb0500 MPI_Finalize_fortran_wrapper>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 16 8 0 NOTE_INSN_DELETED)

